import pandas as pd
import numpy as np
from sklearn.metrics.pairwise import cosine_similarity

rating_parameter = 0.60
#cb filtra slieksnies
cbf_filtr = 0.50
top_N = 10
alpha = 0.1

train = pd.read_csv("train.csv")
test = pd.read_csv("test.csv")
movies = pd.read_csv("movies.csv")

metrics = []
feature_columns = list(movies.columns)
feature_columns.remove('movieId')
movies_features = movies.set_index('movieId')[feature_columns]
movies_features_dict = movies_features.to_dict('index')
all_movies_id = set(movies_features.index)
users = train['userId'].unique()
# LinUCB 
def create_user_model(dim, alpha):
    A = np.eye(dim)
    b = np.zeros((dim,1))
    return {'A':A, 'b':b, 'alpha':alpha}

def get_theta(user):
    return np.linalg.inv(user['A']).dot(user['b'])

def select_top_n(user, candidate_features, n):
    A_inv = np.linalg.inv(user['A'])
    theta =  get_theta(user)
    p = (candidate_features.dot(theta)).ravel() +  user['alpha'] * np.sqrt((candidate_features.dot(A_inv) * candidate_features).sum(axis=1))
    indexes = np.argsort(p)[-n:][::-1]
    return indexes
def update_user(user, x, r):
    x = x.reshape(-1, 1)
    user['A'] += x.dot(x.T)
    user['b'] += r * x


for user_id in users:
    user_ratings_with_features = train.merge(movies, on='movieId')
    user_movies = user_ratings_with_features[user_ratings_with_features.userId == user_id]
    user_liked_movies = user_movies[user_movies.rating >= rating_parameter]


    profile = user_liked_movies[feature_columns].mean().values.reshape(1, -1)
    unseen = list(all_movies_id - set(train[train.userId == user_id].movieId))
    unseen_features = movies_features.loc[unseen].values
    sims = cosine_similarity(profile, unseen_features)[0]
    filtr = [mid for mid, sim in zip(unseen, sims) if sim >= cbf_filtr]

    seen = set()
    hits = []
    mrrs = []
    user_model = create_user_model(len(feature_columns), alpha)
    test_movies = test[test.userId == user_id]['movieId'].values

    for m in test_movies:
        candidates = [ film_id for film_id in filtr if  film_id not in seen]
        features_list = [list(movies_features_dict[fid].values())  for fid in candidates]
        candidate_features = np.array(features_list)

        top_10_index = select_top_n(user_model,candidate_features, top_N)
        top_10 = [candidates[i] for i in top_10_index]
        hit = int(m in top_10)
        hits.append(hit)

        if m in top_10:
            rank = top_10.index(m) + 1
            mrrs.append(1.0 /  rank)
        else:
            mrrs.append(0.0)
        if hit:
            features = np.array(list(movies_features_dict[m].values()))
            update_user(user_model, features, 1)
            seen.add(m)

    metrics.append({'userId': user_id,'hit_rate': np.mean(hits),f'mrr@{top_N}': np.mean(mrrs)})
metrics_all = pd.DataFrame(metrics)
print(metrics_all['hit_rate'].mean(), metrics_all[f'mrr@{top_N}'].mean())

